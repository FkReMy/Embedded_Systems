
01_SEVEN_SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a02  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e8  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000556  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ea  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 00 	call	0xce	; 0xce <main>
  7a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPortDir>:
	return value;
}

void DIO_SetPortDir(unsigned char port, unsigned char dir)
{
	switch(port)
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	59 f0       	breq	.+22     	; 0x9c <DIO_SetPortDir+0x1a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_SetPortDir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	31 f0       	breq	.+12     	; 0x98 <DIO_SetPortDir+0x16>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	39 f0       	breq	.+14     	; 0xa0 <DIO_SetPortDir+0x1e>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	39 f0       	breq	.+14     	; 0xa4 <DIO_SetPortDir+0x22>
  96:	08 95       	ret
	{
		//Port A
		case 'A' :
			DDRA = dir;
  98:	6a bb       	out	0x1a, r22	; 26
		break;
  9a:	08 95       	ret
		
		//Port B
		case 'B' :
			DDRB = dir;
  9c:	67 bb       	out	0x17, r22	; 23
		break;
  9e:	08 95       	ret
		
		//Port C
		case 'C' :
			DDRC = dir;
  a0:	64 bb       	out	0x14, r22	; 20
		break;
  a2:	08 95       	ret
		
		//Port D
		case 'D' :
			DDRD = dir;
  a4:	61 bb       	out	0x11, r22	; 17
  a6:	08 95       	ret

000000a8 <DIO_WritePort>:
	}
}

void DIO_WritePort(unsigned char port, unsigned char val)
{
	switch(port)
  a8:	82 34       	cpi	r24, 0x42	; 66
  aa:	59 f0       	breq	.+22     	; 0xc2 <DIO_WritePort+0x1a>
  ac:	18 f4       	brcc	.+6      	; 0xb4 <DIO_WritePort+0xc>
  ae:	81 34       	cpi	r24, 0x41	; 65
  b0:	31 f0       	breq	.+12     	; 0xbe <DIO_WritePort+0x16>
  b2:	08 95       	ret
  b4:	83 34       	cpi	r24, 0x43	; 67
  b6:	39 f0       	breq	.+14     	; 0xc6 <DIO_WritePort+0x1e>
  b8:	84 34       	cpi	r24, 0x44	; 68
  ba:	39 f0       	breq	.+14     	; 0xca <DIO_WritePort+0x22>
  bc:	08 95       	ret
	{
		//Port A
		case 'A' :
			PORTA = val;
  be:	6b bb       	out	0x1b, r22	; 27
		break;
  c0:	08 95       	ret
		
		//Port B
		case 'B' :
			PORTB = val;
  c2:	68 bb       	out	0x18, r22	; 24
		break;
  c4:	08 95       	ret
		
		//Port C
		case 'C' :
			PORTC = val;
  c6:	65 bb       	out	0x15, r22	; 21
		break;
  c8:	08 95       	ret
		
		//Port D
		case 'D' :
			PORTD = val;
  ca:	62 bb       	out	0x12, r22	; 18
  cc:	08 95       	ret

000000ce <main>:

#include "SEVEN_SEG_interface.h"

int main(void)
{
    SEVEN_SEG_Init(portb);
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 7d 00 	call	0xfa	; 0xfa <SEVEN_SEG_Init>
    while (1) 
    {
		unsigned char i;
		for (i=0; i<=9;i++)
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <main+0x26>
		{
			SEVEN_SEG_Write( portb, i);
  d8:	6c 2f       	mov	r22, r28
  da:	82 e4       	ldi	r24, 0x42	; 66
  dc:	0e 94 81 00 	call	0x102	; 0x102 <SEVEN_SEG_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	98 e1       	ldi	r25, 0x18	; 24
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x18>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x22>
  f0:	00 00       	nop
{
    SEVEN_SEG_Init(portb);
    while (1) 
    {
		unsigned char i;
		for (i=0; i<=9;i++)
  f2:	cf 5f       	subi	r28, 0xFF	; 255
  f4:	ca 30       	cpi	r28, 0x0A	; 10
  f6:	80 f3       	brcs	.-32     	; 0xd8 <main+0xa>
  f8:	ed cf       	rjmp	.-38     	; 0xd4 <main+0x6>

000000fa <SEVEN_SEG_Init>:
  fa:	6f ef       	ldi	r22, 0xFF	; 255
  fc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPortDir>
 100:	08 95       	ret

00000102 <SEVEN_SEG_Write>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	2a 97       	sbiw	r28, 0x0a	; 10
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	9a e0       	ldi	r25, 0x0A	; 10
 118:	e0 e6       	ldi	r30, 0x60	; 96
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	de 01       	movw	r26, r28
 11e:	11 96       	adiw	r26, 0x01	; 1
 120:	01 90       	ld	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	9a 95       	dec	r25
 126:	e1 f7       	brne	.-8      	; 0x120 <SEVEN_SEG_Write+0x1e>
 128:	e1 e0       	ldi	r30, 0x01	; 1
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	e6 0f       	add	r30, r22
 132:	f1 1d       	adc	r31, r1
 134:	60 81       	ld	r22, Z
 136:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_WritePort>
 13a:	2a 96       	adiw	r28, 0x0a	; 10
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
